/**
 * # 자바스크립트 참조 타입(객체 타입)
 *  * 기본 타입을 제외한 모든 값을 객체다.
 *  * 배열, 함수, 정규표현식 등 모두 자바스크립트 객체로 표현된다.
 *  * 자바스크립트에서 객체는 단순히 '이름(key)': '값(value)'  형태의 프로퍼티들을 저장하는 컨테이너이다.
 *  * 컴퓨터 과학 분야에서 해시(hash)라는 자료구조와 상당히 유사하다.
 *  * 기본 타입은 하나의 값을 가지지만 참조 타입은 여러 개의 프로퍼티들을 포함할 수 있으며, 이러한 객체의 프로퍼티는 기본 타입의 값을 포함하거나, 다른 객체를 가리킬 수도 있다.
 *  * 객체의 프로퍼티는 함수로 포함할 수 있으며, 자바스크립트에서는 이런 프로퍼티를 메서드라고 부른다.
 * */ 

/**
 *  * 객체 생성
 *    + 자바스크립트의 객체 개념은 생성 상법이나 상속 방식에서 C++, JAVA 같은 기존 객체지향 언어에서의 객체 개념과 약간 다르다.
 *    + 자바에서는 클래스를 정의하고, 클래스의 인스턴스를 생성하는 과정에서 객체가 만들어진다.
 *    + 자바스크립트에서는 클래스라는 개념이 없고(정확히 말하면 예약어로 클래스처럼 보이게 할순 있지만 클래스는 아니다.), 객체 리터럴이나 생성자 함수 등 별도의 생성 방식이 존재한다.
 */

/**
 *  * 1. Object() 생성자 함수 이용
 *    + 자바스크립트에서는 객체를 생성할 때, 내장 Object() 생성자 함수를 제공한다.
 */

let obj1 = new Object();

obj1.name = 'raehan'
obj1.birthday = '809'

console.log(typeof obj1);
console.log(obj1)

/**
 *  * 2. 객체 리터럴 방식 이용
 *    + 객체를 생성하는 표기법.
 *    + 중괄호({})를 이용해 객체를 생성한다.
 */

let obj2 = {
  name: 'raehan',
  birthday: '809'
}

console.log(typeof obj2)
console.log(obj2)

/**
 *  * 3. 생성자 함수 이용
 *    + chapter 4에서 제대로..
 */

/**
 *  * 객체 프로퍼티 읽기/쓰기/갱신
 *    + 객체는 새로운 값을 가진 프로퍼티를 생성하고, 값을 읽거나 갱신 가능하다.
 *    + 두가지 방법이 있다.
 *      - 1. 대괄호 ([]) 표기법
 *        - 접근하려는 프로퍼티가 표현식이나 예약어일 경우 대괄호 표기법만을 이용하여 접근해야 한다.
 *      - 2. 마침표 (.) 표기법
 */

/**
 *  * for in 문을 이용한 객체 프로퍼티 출력
 *    + for in 문을 사용하면, 객체에 포함된 모든 프로퍼티에 대해 루프를 수행할 수 있다. 
 */

let tempObj1 = {
  name: 'foo',
  age: 30,
  major: 'computer science'
}

for (let prop in tempObj1) {
  console.log(prop, tempObj1[prop])
}

/**
 *  * 객체 프로퍼티 삭제
 *    + 자바스크립트에서는 객체의 프로퍼티를 delete 연산자를 이용해 즉시 삭제할 수 있다.
 *    + 객체의 프로퍼티를 삭제할 뿐, 객체 자체를 삭제하지는 못한다. 
 */

let foo = {
  name: 'foo',
  nickname: 'bar'
}

console.log(foo)
delete foo.nickname
console.log(foo)



